class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer>list=new ArrayList<>();
        
        HashMap<Character,Integer> pmap=new HashMap<>();
        HashMap<Character,Integer>smap=new HashMap<>();
        if(s.length()<p.length())
            return list;
        for(int i=0;i<p.length();i++)
        {
            char cp=p.charAt(i);
            int pf=pmap.getOrDefault(cp,0);
            pmap.put(cp,pf+1);
            
            char cs=s.charAt(i);
            int ps=smap.getOrDefault(cs,0);
            smap.put(cs,ps+1);
        }
        int j=0;
        int i=p.length();
        while(i<s.length())
        {
            if(compare(smap,pmap))
                list.add(j);
            
            char ch=s.charAt(i);
            smap.put(ch,smap.getOrDefault(ch,0)+1);
            char cha=s.charAt(j);
            if(smap.get(cha)==1)
                smap.remove(cha);
            else
                smap.put(cha,smap.get(cha)-1);
            i++;
            j++;
        }
          if(compare(smap,pmap))
                list.add(j);
        
        return list;
    }
    public boolean compare(HashMap<Character,Integer>smap, HashMap<Character,Integer>pmap)
    {
        for(char sch:smap.keySet())
        {
            if(smap.get(sch)!=pmap.getOrDefault(sch,0))
                return false;
        }
        return true;
    }
}
           
           //Increment for next iteration
           end++;
           
       }
       
       return soln;
       
       
    }
}
